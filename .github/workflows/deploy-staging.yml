name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: caseguard-datapipelines

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile.worker
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-worker:staging,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-worker:develop
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_SSH_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: 22
        script: |
          set -e

          # Navigate to deployment directory
          cd /opt/caseguard-staging

          # Create environment file from secret
          echo "${{ secrets.STAGING_ENV_FILE }}" > .env

          # Update image tags in docker-compose
          sed -i "s|ghcr.io/.*:.*|${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:staging|g" docker-compose.staging.yml
          sed -i "s|ghcr.io/.*-worker:.*|${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-worker:staging|g" docker-compose.staging.yml

          # Pull latest images
          docker compose -f docker-compose.staging.yml pull

          # Deploy with zero downtime
          docker compose -f docker-compose.staging.yml up -d --remove-orphans

          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30

          # Health check
          if ! curl -f http://localhost:8001/health > /dev/null 2>&1; then
            echo "Health check failed, rolling back..."
            docker compose -f docker-compose.staging.yml logs --tail=50
            exit 1
          fi

          echo "Deployment successful!"

          # Cleanup old images
          docker image prune -f

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_SSH_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: 22
        script: |
          # Final health check
          curl -f https://caseguard-staging.vynta.ai/health || exit 1
          echo "Staging deployment verified successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Staging deployment successful!"
          echo "üîó Staging URL: https://caseguard-staging.vynta.ai"
        else
          echo "‚ùå Staging deployment failed!"
        fi